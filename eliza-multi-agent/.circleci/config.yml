version: 2.1

orbs:
  docker: circleci/docker@2.2.0
  kubernetes: circleci/kubernetes@1.3

executors:
  docker-builder:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: large
  
  pulumi-deployer:
    docker:
      - image: pulumi/pulumi:latest
    resource_class: medium

commands:
  setup_buildx:
    description: "Set up Docker buildx for multi-platform builds"
    steps:
      - run:
          name: Enable Docker experimental features
          command: |
            mkdir -p ~/.docker
            echo '{"experimental": "true"}' | tee ~/.docker/config.json
      
      - run:
          name: Set up Docker buildx
          command: |
            docker version
            
            BUILDX_VERSION=v0.12.1
            mkdir -p ~/.docker/cli-plugins
            curl -sSL "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64" -o ~/.docker/cli-plugins/docker-buildx
            chmod +x ~/.docker/cli-plugins/docker-buildx
            
            docker buildx version
            docker buildx rm mybuilder || true
            docker buildx create --use --name mybuilder --driver docker-container
            docker buildx inspect --bootstrap mybuilder

jobs:
  verify-dockerfile:
    executor: docker-builder
    steps:
      - checkout
      
      # Restore Docker cache
      - restore_cache:
          keys:
            - eliza-docker-cache-verify-{{ .Branch }}-{{ .Revision }}
            - eliza-docker-cache-verify-{{ .Branch }}-
            - eliza-docker-cache-verify-
      
      # Install additional tools
      - run:
          name: Install additional tools
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      
      # Install Hadolint
      - run:
          name: Install Hadolint
          command: |
            HADOLINT_VERSION=v2.12.0
            sudo curl -sSL "https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64" -o /usr/local/bin/hadolint
            sudo chmod +x /usr/local/bin/hadolint
            hadolint --version
      
      # Set up Docker buildx
      - setup_buildx
      
      # Output architecture information
      - run:
          name: Output architecture information
          command: |
            echo "Architecture: $(uname -m)"
            echo "Node version: $(node -v)"
            echo "npm version: $(npm -v)"
      
      # Verify Dockerfile syntax
      - run:
          name: Verify Dockerfile syntax
          command: |
            cp sprint-2/Dockerfile.improved ./Dockerfile.sprint2
            hadolint Dockerfile.sprint2 || echo "Linting issues found, but continuing..."
      
      # Test build with minimal scope
      - run:
          name: Test build with minimal scope (no push)
          command: |
            echo "Building verification image..."
            docker buildx build \
              --platform linux/amd64 \
              -t eliza-verify:${CIRCLE_SHA1} \
              -f Dockerfile.sprint2 \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --load \
              .
      
      # Save Docker cache
      - save_cache:
          key: eliza-docker-cache-verify-{{ .Branch }}-{{ .Revision }}
          paths:
            - /home/circleci/.docker/buildx

  dependency-audit:
    docker:
      - image: cimg/node:18.18
    steps:
      - checkout
      
      - run:
          name: Install pnpm
          command: |
            npm install -g pnpm@9.15.7
      
      - restore_cache:
          keys:
            - eliza-dependencies-{{ checksum "pnpm-lock.yaml" }}
            - eliza-dependencies-
      
      - run:
          name: Install dependencies
          command: |
            pnpm install
      
      - save_cache:
          key: eliza-dependencies-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
            - packages/*/node_modules
      
      - run:
          name: Run dependency audit
          command: |
            mkdir -p reports
            chmod +x sprint-2/dependency-audit.sh
            ./sprint-2/dependency-audit.sh > reports/dependency-audit.md
            echo "Audit results saved to reports/dependency-audit.md"
      
      - store_artifacts:
          path: reports/dependency-audit.md
          destination: dependency-audit.md

  build-and-push-eliza:
    executor: docker-builder
    steps:
      - checkout
      
      # Restore Docker cache
      - restore_cache:
          keys:
            - eliza-docker-cache-build-{{ .Branch }}-{{ .Revision }}
            - eliza-docker-cache-build-{{ .Branch }}-
            - eliza-docker-cache-build-
      
      # Set up Docker buildx
      - setup_buildx
      
      # Login to DigitalOcean Registry
      - run:
          name: Login to DigitalOcean Container Registry
          command: |
            echo $DIGITALOCEAN_ACCESS_TOKEN | docker login registry.digitalocean.com -u $DIGITALOCEAN_ACCESS_TOKEN --password-stdin
      
      # Prepare Dockerfile
      - run:
          name: Prepare Dockerfile
          command: |
            cp sprint-2/Dockerfile.improved ./Dockerfile
      
      # Build and push Eliza image
      - run:
          name: Build and push Eliza multi-agent image
          command: |
            # Build with better error handling
            echo "Building with buildx for amd64..."
            
            set +e
            docker buildx build \
              --platform linux/amd64 \
              -t registry.digitalocean.com/pioneer/pioneer-agent:${CIRCLE_SHA1} \
              -t registry.digitalocean.com/pioneer/pioneer-agent:latest \
              -t registry.digitalocean.com/pioneer/pioneer-agent:sprint-2 \
              -f Dockerfile \
              --cache-from=registry.digitalocean.com/pioneer/pioneer-agent:latest \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --push \
              .
            
            BUILD_RESULT=$?
            if [ $BUILD_RESULT -ne 0 ]; then
              echo "Buildx build failed with exit code $BUILD_RESULT. See logs for details."
              exit $BUILD_RESULT
            fi
            
            echo "Build and push completed successfully!"
      
      # Save Docker cache
      - save_cache:
          key: eliza-docker-cache-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - /home/circleci/.docker/buildx
      
      # Record deployment metadata
      - run:
          name: Record Deployment Metadata
          command: |
            mkdir -p /tmp/deployment
            echo "{\"image\":\"registry.digitalocean.com/pioneer/pioneer-agent:${CIRCLE_SHA1}\", \"commit\":\"${CIRCLE_SHA1}\", \"branch\":\"${CIRCLE_BRANCH}\", \"build_url\":\"${CIRCLE_BUILD_URL}\"}" > /tmp/deployment/metadata.json
            cat /tmp/deployment/metadata.json
      
      - persist_to_workspace:
          root: /tmp
          paths:
            - deployment

  deploy-to-kubernetes:
    executor: pulumi-deployer
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      
      - run:
          name: Install doctl
          command: |
            apt-get update && apt-get install -y curl jq
            cd /tmp
            curl -sL https://github.com/digitalocean/doctl/releases/download/v1.101.0/doctl-1.101.0-linux-amd64.tar.gz | tar -xzv
            mv doctl /usr/local/bin
      
      - run:
          name: Setup Kubernetes Config
          command: |
            doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN
            doctl kubernetes cluster kubeconfig save do-cluster-2b9226d
      
      - run:
          name: Read deployment metadata
          command: |
            IMAGE_TAG=$(cat /tmp/deployment/metadata.json | jq -r '.image')
            echo "Image tag for deployment: $IMAGE_TAG"
            echo "export DEPLOY_IMAGE=$IMAGE_TAG" >> $BASH_ENV
      
      - run:
          name: Deploy with Pulumi
          command: |
            cd ./infrastructure/pulumi
            PULUMI_CONFIG_PASSPHRASE=$PULUMI_PASSPHRASE pulumi login
            PULUMI_CONFIG_PASSPHRASE=$PULUMI_PASSPHRASE pulumi stack select dev
            PULUMI_CONFIG_PASSPHRASE=$PULUMI_PASSPHRASE REGISTRY_IMAGE_TAG=$DEPLOY_IMAGE pulumi up --yes

workflows:
  version: 2
  sprint-2-eliza-deploy:
    jobs:
      - verify-dockerfile:
          filters:
            branches:
              only:
                - sprint-2
                - main
      
      - dependency-audit:
          filters:
            branches:
              only:
                - sprint-2
                - main
      
      - build-and-push-eliza:
          requires:
            - verify-dockerfile
            - dependency-audit
          filters:
            branches:
              only:
                - sprint-2
                - main
      
      - deploy-to-kubernetes:
          requires:
            - build-and-push-eliza
          filters:
            branches:
              only:
                - sprint-2
                - main 