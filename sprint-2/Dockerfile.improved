# Multi-stage build for Eliza Multi-Agent
# Builder stage with full development tools - using Node 18 for better compatibility
FROM node:18-slim AS builder

# Install build essentials and development dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3 \
    git \
    curl \
    node-gyp \
    ffmpeg \
    libtool-bin \
    autoconf \
    automake \
    libopus-dev \
    make \
    g++ \
    libcairo2-dev \
    libjpeg-dev \
    libpango1.0-dev \
    libgif-dev \
    openssl \
    libssl-dev \
    libsecret-1-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set Python 3 as the default python
RUN ln -sf /usr/bin/python3 /usr/bin/python

# Set working directory
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@9.15.7

# Copy package files to leverage Docker cache
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml .npmrc ./
COPY agent/package.json agent/
COPY client/package.json client/
COPY packages/core/package.json packages/core/

# Create dependency overrides for problematic modules
RUN echo '\n\
{\n\
  "resolutions": {\n\
    "@rollup/rollup-linux-arm64-gnu": "optional:@rollup/rollup-linux-x64-gnu@*",\n\
    "@swc/core-linux-arm64-gnu": "optional:@swc/core-linux-x64-gnu@*",\n\
    "esbuild-linux-arm64": "optional:esbuild-linux-64@*",\n\
    "fastembed": "optional:fastembed@*"\n\
  }\n\
}' > .pnpmrc

# Install dependencies - skip optional for better compatibility
RUN pnpm install --no-optional

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Final stage - runtime only
FROM node:18-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    python3 \
    curl \
    ffmpeg \
    git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@9.15.7

# Copy necessary files from builder
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-workspace.yaml ./
COPY --from=builder /app/pnpm-lock.yaml ./
COPY --from=builder /app/.npmrc ./
COPY --from=builder /app/turbo.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/agent ./agent
COPY --from=builder /app/client ./client
COPY --from=builder /app/lerna.json ./
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/characters ./characters

# Set environment variables
ENV NODE_ENV=production
ENV SERVER_PORT=3000
ENV CLIENT_PORT=5173

# Expose ports
EXPOSE 3000 5173

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -s http://localhost:3000/api/health || exit 1

# Start command
CMD ["sh", "-c", "pnpm start & pnpm start:client"] 